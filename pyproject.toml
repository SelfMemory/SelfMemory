[project]
name = "inmemory"
version = "0.1.0"
description = "Enhanced Memory Management Core Library"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Core dependencies - zero external databases required
    "qdrant-client>=1.7.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.1.1",
    "cryptography>=45.0.6",
    "httpx>=0.28.0",
]

[project.optional-dependencies]
# API server capabilities (main.py)
server = [
    "fastapi>=0.116.1",
    "uvicorn>=0.34.0",
    "starlette>=0.45.0"
]

# MongoDB backend (current enterprise setup)
mongodb = [
    "pymongo>=4.10.0"
]

# OAuth authentication (Google signin)  
oauth = [
    "authlib>=1.3.2",
    "google-auth>=2.14.1"
]

# MCP server support
mcp = [
    "mcp[cli]>=1.2.1",
    "fastmcp>=2.11.3"
]

# Embedding providers
embedding = [
    "ollama>=0.2.0"
]

# YAML configuration support
yaml = [
    "pyyaml>=6.0.0"
]

# Enterprise = MongoDB + OAuth + Server
enterprise = [
    "inmemory[server,mongodb,oauth,yaml]"
]

# Everything including MCP
full = [
    "inmemory[server,mongodb,oauth,mcp,embedding,yaml]"
]

# Development dependencies
dev = [
    "ruff>=0.8.0", 
    "pre-commit>=3.6.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0"
]

# Testing dependencies  
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0"
]

[project.scripts]
inmemory = "inmemory.cli:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["inmemory*"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",
    "E7",
    "E9",
    "F",
    "W",
    "B",   # flake8-bugbear
    "I",   # isort
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",   # Line too long, handled by formatter
    "B008",   # Do not perform function calls in argument defaults
    "RET504", # Unnecessary variable assignment before `return` statement
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used by the formatter.
docstring-code-line-length = "dynamic"
